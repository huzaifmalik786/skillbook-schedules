# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Auto Deploy NextJS to EC2 Instance

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PUBLICATION: ${{ secrets.PUBLICATION }}
  NEXT_PUBLIC_STRAPI_URL:  ${{ secrets.NEXT_PUBLIC_STRAPI_URL }}
  IP_STACK_API_KEY: ${{ secrets.IP_STACK_API_KEY }}
  SITE_URL: ${{ secrets.SITE_URL }}


jobs:
  build:

    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/cache@v3
      with:
        # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
        path: |
          ~/.npm
          ${{ github.workspace }}/.next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      # uses: actions/setup-node@v3
      # with:
        node-version: ${{ matrix.node-version }}
    - name: Install PM2
      run: npm install -g pm2

    - name: Install Node Module
      run: npm ci --force

    - name: Build,Start and Restart Web Application
      run: RUNNER_TRACKING_ID="" && npm run build && pm2 restart skillbook
